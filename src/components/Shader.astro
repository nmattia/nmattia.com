---
import type { QuadShader } from "quad-shader";

type QuadShaderUtils = typeof import("quad-shader");
interface Props {
  fragShader: string;
  quadShaderSetup: (quadShader: QuadShader, q: QuadShaderUtils) => void;
}

const { fragShader, quadShaderSetup } = Astro.props;
---

<style>
  canvas {
    max-width: 100%;
  }
</style>

<canvas
  data-fragment-shader={fragShader}
  data-quad-shader-setup={quadShaderSetup}></canvas>

<script>
  import * as qsUtils from "quad-shader";
  import { animate } from "quad-shader";

  // Ensure all canvases (with shaders) have callbacks set up
  const hydrateCanvases = () => {
    const canvases = document.querySelectorAll("canvas");
    Array.from(canvases).forEach((canvas) => {
      const fragShader = canvas.dataset.fragmentShader!;
      const quadShaderSetup = canvas.dataset.quadShaderSetup;

      const qs = animate(canvas, fragShader);

      if (quadShaderSetup) {
        const f = Function(
          "qsUtils",
          `"use strict"; return (qs => (${quadShaderSetup})(qs, qsUtils))`,
        )(qsUtils);
        f(qs);
      }
    });
  };
  document.addEventListener("astro:page-load", hydrateCanvases);
</script>
